{
  "alfredsnippet" : {
    "snippet" : "# Use this setup block to configure all options available in SimpleForm.\n# https:\/\/github.com\/patricklindsay\/simple_form-materialize\/blob\/master\/lib\/generators\/simple_form\/materialize\/templates\/config\/initializers\/simple_form_materialize.rb\n# contribute here: https:\/\/github.com\/mkhairi\/materialize-sass\/issues\/16\nSimpleForm.setup do |config|\n\n  config.wrappers :default, class: :input,\n    hint_class: :field_with_hint, error_class: :field_with_errors do |b|\n    ## Extensions enabled by default\n    # Any of these extensions can be disabled for a\n    # given input by passing: `f.input EXTENSION_NAME => false`.\n    # You can make any of these extensions optional by\n    # renaming `b.use` to `b.optional`.\n\n    # Determines whether to use HTML5 (:email, :url, ...)\n    # and required attributes\n    b.use :html5\n\n    # Calculates placeholders automatically from I18n\n    # You can also pass a string as f.input placeholder: \"Placeholder\"\n    b.use :placeholder\n\n    ## Optional extensions\n    # They are disabled unless you pass `f.input EXTENSION_NAME => true`\n    # to the input. If so, they will retrieve the values from the model\n    # if any exists. If you want to enable any of those\n    # extensions by default, you can change `b.optional` to `b.use`.\n\n    # Calculates maxlength from length validations for string inputs\n    b.optional :maxlength\n\n    # Calculates pattern from format validations for string inputs\n    b.optional :pattern\n\n    # Calculates min and max from length validations for numeric inputs\n    b.optional :min_max\n\n    # Calculates readonly automatically from readonly attributes\n    b.optional :readonly\n\n    ## Inputs\n    b.use :label_input\n    b.use :hint,  wrap_with: { tag: :div, class: 'help-block' }\n    b.use :error, wrap_with: { tag: :span, class: 'error-block' }\n\n    ## full_messages_for\n    # If you want to display the full error message for the attribute, you can\n    # use the component :full_error, like:\n    #\n    # b.use :full_error, wrap_with: { tag: :span, class: :error }\n  end\n\n  # https:\/\/github.com\/plataformatec\/simple_form\/blob\/754dc1d5d4ea010b1abdc9d386fcbfdcabc6baae\/lib\/simple_form.rb\n  config.wrappers :materialize_string, tag: 'div' do |b|\n    b.use :html5\n    b.optional :readonly\n\n    b.wrapper :container_wrapper, tag: 'div', class: 'input-field' do |ba|\n      ba.use :label_input\n    end\n\n    b.use :hint,  wrap_with: { tag: :span, class: 'help-block' }\n    b.use :error, wrap_with: { tag: :span, class: 'error-block' }\n  end\n\n  config.wrappers :materialize_file_input, tag: 'div', class: 'file-field input-field' do |b|\n    b.use :html5\n    b.optional :readonly\n\n    b.wrapper :button_wrapper, tag: 'div', class: 'btn' do |button_wrapper|\n      button_wrapper.use :label_text, wrap_with: { tag: :span }\n      button_wrapper.use :input\n    end\n\n    b.wrapper :path_validate, tag: 'div', class: 'file-path-wrapper' do |path_validate_wrapper|\n      path_validate_wrapper.use :input, class: 'file-path validate', type: 'text', name: 'zz'\n      # path_validate_wrapper.wrapper :path_validate_input, tag: 'input', class: 'file-path validate', type: 'text' do\n      # end\n    end\n\n    b.use :hint,  wrap_with: { tag: :span, class: 'help-block' }\n    b.use :error, wrap_with: { tag: :span, class: 'error-block' }\n  end\n\n  config.wrappers :materialize_text_area, tag: 'div', class: 'input-field' do |b|\n    b.use :html5\n    b.optional :readonly\n\n    b.use :input, class: 'materialize-textarea'\n    b.use :label\n\n    b.use :hint,  wrap_with: { tag: :span, class: 'help-block' }\n    b.use :error, wrap_with: { tag: :span, class: 'error-block' }\n  end\n\n  config.wrappers :materialize_date, tag: 'div', class: '' do |b|\n    b.use :html5\n    b.optional :readonly\n\n    b.use :input, class: 'datepicker'\n    b.use :label_text\n\n    b.use :hint,  wrap_with: { tag: :span, class: 'help-block' }\n    b.use :error, wrap_with: { tag: :span, class: 'error-block' }\n  end\n\n  config.wrappers :materialize_multiple, tag: 'div', class: 'row' do |b|\n    b.use :html5\n    b.optional :readonly\n\n    b.wrapper :label_wrapper, tag: 'div', class: 's12 col label' do |label_wrapper|\n      label_wrapper.wrapper :tag => 'label' do |bb|\n        bb.use :label_text\n      end\n\n      label_wrapper.use :hint,  wrap_with: { tag: :span, class: 'help-block' }\n      label_wrapper.use :error, wrap_with: { tag: :span, class: 'error-block' }\n\n    end\n\n    b.wrapper :options_wrapper, tag: 'div', class: 's12 col options' do |options_wrapper|\n      options_wrapper.use :input, wrap_with: { tag: :div }\n    end\n\n  end\n\n  config.wrappers :two_columns, tag: 'div', class: 'row' do |b|\n    b.use :html5\n    b.optional :readonly\n\n    b.wrapper :label_wrapper, tag: 'div', class: 's12 col label' do |label_wrapper|\n      label_wrapper.wrapper :tag => 'label' do |bb|\n        bb.use :label_text\n      end\n\n      label_wrapper.use :hint,  wrap_with: { tag: :span, class: 'help-block' }\n      label_wrapper.use :error, wrap_with: { tag: :span, class: 'error-block' }\n    end\n\n    b.wrapper :options_wrapper, tag: 'div', class: 's12 col options two-columns' do |options_wrapper|\n      options_wrapper.use :input\n    end\n\n  end\n\n  # The default wrapper to be used by the FormBuilder.\n  config.default_wrapper = :default\n\n  # Define the way to render check boxes \/ radio buttons with labels.\n  # Defaults to :nested for bootstrap config.\n  #   inline: input + label\n  #   nested: label > input\n  config.boolean_style = :inline\n\n  # Default class for buttons\n  config.button_class = 'waves-effect waves-light btn'\n\n  # Method used to tidy up errors. Specify any Rails Array method.\n  # :first lists the first message for each field.\n  # Use :to_sentence to list all errors for each field.\n  # config.error_method = :first\n\n  # Default tag used for error notification helper.\n  config.error_notification_tag = :div\n\n  # CSS class to add for error notification helper.\n  config.error_notification_class = 'error_notification'\n\n  # ID to add for error notification helper.\n  # config.error_notification_id = nil\n\n  # Series of attempts to detect a default label method for collection.\n  # config.collection_label_methods = [ :to_label, :name, :title, :to_s ]\n\n  # Series of attempts to detect a default value method for collection.\n  # config.collection_value_methods = [ :id, :to_s ]\n\n  # You can wrap a collection of radio\/check boxes in a pre-defined tag, defaulting to none.\n  # config.collection_wrapper_tag = nil\n\n  # You can define the class to use on all collection wrappers. Defaulting to none.\n  # config.collection_wrapper_class = nil\n\n  # You can wrap each item in a collection of radio\/check boxes with a tag,\n  # defaulting to :span.\n  config.item_wrapper_tag = :div\n\n  # You can define a class to use in all item wrappers. Defaulting to none.\n  # config.item_wrapper_class = nil\n\n  # How the label text should be generated altogether with the required text.\n  # config.label_text = lambda { |label, required, explicit_label| \"#{required} #{label}\" }\n\n  # You can define the class to use on all labels. Default is nil.\n  # config.label_class = nil\n\n  # You can define the default class to be used on forms. Can be overriden\n  # with `html: { :class }`. Defaulting to none.\n  # config.default_form_class = nil\n\n  # You can define which elements should obtain additional classes\n  # config.generate_additional_classes_for = [:wrapper, :label, :input]\n\n  # Whether attributes are required by default (or not). Default is true.\n  # config.required_by_default = true\n\n  # Tell browsers whether to use the native HTML5 validations (novalidate form option).\n  # These validations are enabled in SimpleForm's internal config but disabled by default\n  # in this configuration, which is recommended due to some quirks from different browsers.\n  # To stop SimpleForm from generating the novalidate option, enabling the HTML5 validations,\n  # change this configuration to true.\n  config.browser_validations = false\n\n  # Collection of methods to detect if a file type was given.\n  # config.file_methods = [ :mounted_as, :file?, :public_filename ]\n\n  # Custom mappings for input types. This should be a hash containing a regexp\n  # to match as key, and the input type that will be used when the field name\n  # matches the regexp as value.\n  # config.input_mappings = { \/count\/ => :integer }\n\n  # Custom wrappers for input types. This should be a hash containing an input\n  # type as key and the wrapper that will be used for all inputs with specified type.\n  # https:\/\/github.com\/plataformatec\/simple_form#available-input-types-and-defaults-for-each-column-type\n  config.wrapper_mappings = { text: :materialize_text_area,\n                              string: :materialize_string,\n                              email: :materialize_string,\n                              tel: :materialize_string,\n                              number: :materialize_string,\n                              integer: :materialize_string,\n                              decimal: :materialize_string,\n                              date: :materialize_date,\n                              check_boxes: :materialize_multiple,\n                              radio_buttons: :materialize_multiple,\n                              switch: :material_checkbox,\n                              file: :materialize_file_input,\n                              # boolean: :horizontal_boolean\n                            }\n\n  # Namespaces where SimpleForm should look for custom input classes that\n  # override default inputs.\n  # config.custom_inputs_namespaces << \"CustomInputs\"\n\n  # Default priority for time_zone inputs.\n  # config.time_zone_priority = nil\n\n  # Default priority for country inputs.\n  # config.country_priority = nil\n\n  # When false, do not use translations for labels.\n  # config.translate_labels = true\n\n  # Automatically discover new inputs in Rails' autoload path.\n  # config.inputs_discovery = true\n\n  # Cache SimpleForm inputs discovery\n  # config.cache_discovery = !Rails.env.development?\n\n  # Default class for inputs\n  # config.input_class = nil\n\n  # Define the default class of the input wrapper of the boolean input.\n  config.boolean_label_class = 'checkbox'\n\n      # .checkbox\n      #   = f.check_box :remember_me\n      #   = f.label :remember_me\n\n\n  # config.wrappers :radio_and_checkboxes, tag: 'div', class: 'row' do |b|\n  #   b.use :html5\n  #   b.optional :readonly\n\n  #   b.wrapper :container_wrapper, tag: 'div', class: 'small-offset-3 small-9 columns' do |ba|\n  #     ba.wrapper :tag => 'label', :class => 'checkbox' do |bb|\n  #       bb.use :input\n  #       bb.use :label_text\n  #     end\n\n  #     ba.use :error, wrap_with: { tag: :small, class: :error }\n  #     # ba.use :hint,  wrap_with: { tag: :span, class: :hint }\n  #   end\n  # end\n\n  # Defines if the default input wrapper class should be included in radio\n  # collection wrappers.\n  # config.include_default_input_wrapper_class = true\n\n  # Defines which i18n scope will be used in Simple Form.\n  # config.i18n_scope = 'simple_form'\nend\n",
    "dontautoexpand" : true,
    "uid" : "95A76049-5BAD-4F1D-8A45-EEE4CBECE8A0",
    "name" : "simple_form materialize initializer",
    "keyword" : ""
  }
}